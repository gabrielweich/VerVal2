import Connection from './../db';

const AmostraDAO = {
  insert: amostra => {
    return new Promise((resolve, error) => {
      const con = Connection.getConnection();
      con.connect(function(err) {
        if (err) throw err;
        console.log('Connected!');
        var sql = 'INSERT INTO AMOSTRAS VALUES ?';
        var values = amostra;
        console.log(values);
        con
          .query(sql, [values], function(err, result) {
            if (err) throw err;
            console.log('Number of records inserted: ' + result.affectedRows);
            resolve(result.affectedRows)
          })
          .on('error', err => {
              if(err.code == 'ER_DUP_ENTRY'){
                  let duplicated = err.sqlMessage.split("'")[1]
                  let er = {
                      type: "Duplicated Entry",
                      data: duplicated
                  }
                  error(er);
              }else if(err.code == 'ER_WRONG_VALUE_COUNT_ON_ROW'){
                let er = {
                    type: "INVALID CSV",
                    data: "INVALID CSV"
                }
                error(er)
              }
            error(err);
          })
          .on('end', () => {
            con.destroy();
          });
      });
    });
  },
  getIdsData: () => {
    return new Promise((resolve,error) => {
        const con = Connection.getConnection();
        con.connect(function(err) {
          if (err) throw err;
          console.log('Connected!');
          var sql = 'SELECT id,data_entrada FROM AMOSTRAS';
          con.query(sql,function(err, result){
            if(err) throw err;
            resolve(result);
          })
        })
    });
  },
  getIds: () => {
    return new Promise((resolve,error) => {
        const con = Connection.getConnection();
        con.connect(function(err) {
          if (err) throw err;
          console.log('Connected!');
          var sql = 'SELECT id FROM AMOSTRAS';
          con.query(sql,function(err, result){
            if(err) throw err;
            resolve(result);
          })
        })
    });
  },
  getData: () => {
    return new Promise((resolve,error) => {
        const con = Connection.getConnection();
        con.connect(function(err) {
          if (err) throw err;
          console.log('Connected!');
          var sql = 'SELECT data_entrada FROM AMOSTRAS';
          con.query(sql,function(err, result){
            if(err) throw err;
            resolve(result);
          })
        })
    });
  },
  getBytId: (id) => {
    return new Promise((resolve,error) => {
        const con = Connection.getConnection();
        con.connect(function(err) {
          if (err) throw err;
          console.log('Connected!');
          var sql = "SELECT data_entrada,c525, c526, c528, c530, c532, c534, c536, c538, c540, c542, c544, c546, c548, c550, c552, c553, c555, c557, c559, c561, c563, c565, c567, c569, c571, c573, c575, c577, c579, c580, c582, c584, c586, c588, c590, c592, c594, c596, c598, c600, c602, c604, c606, c607, c609, c611, c613, c615, c617, c619, c621, c623, c625, c627, c629, c631, c633, c634, c636, c638, c640, c642, c644, c646, c648, c650, c652, c654, c656, c658, c660, c661, c663, c665, c667, c669, c671, c673, c675, c677, c679, c681, c683, c685, c687, c688, c690, c692, c694, c696, c698, c700, c702, c704, c706, c708, c710, c712, c714, c715, c717, c719, c721, c723, c725, c727, c729, c731, c733, c735, c737, c739, c741, c742, c744, c746, c748, c750, c752, c754, c756, c758, c760, c762, c764, c766, c768, c769, c771, c773, c775, c777, c779, c781, c783, c785, c787, c789, c791, c793, c795, c796, c798, c800, c802, c804, c806, c808, c810, c812, c814, c816, c818, c820, c822, c823, c825, c827, c829, c831, c833, c835, c837, c839, c841, c843, c845, c847, c849, c850, c852, c854, c856, c858, c860, c862, c864, c866, c868, c870, c872, c874, c876, c877, c879, c881, c883, c885, c887, c889, c891, c893, c895, c897, c899, c901, c903, c904, c906, c908, c910, c912, c914, c916, c918, c920, c922, c924, c926, c928, c930, c931, c933, c935, c937, c939, c941, c943, c945, c947, c949, c951, c953, c955, c957, c958, c960, c962, c964, c966, c968, c970, c972, c974, c976, c978, c980, c982, c984, c985, c987, c989, c991, c993, c995, c997, c999, c1001, c1003, c1005, c1007, c1009, c1011, c1012, c1014, c1016, c1018, c1020, c1022, c1024, c1026, c1028, c1030, c1032, c1034, c1036, c1038, c1039, c1041, c1043, c1045, c1047, c1049, c1051, c1053, c1055, c1057, c1059, c1061, c1063, c1065, c1066, c1068, c1070, c1072, c1074, c1076, c1078, c1080, c1082, c1084, c1086, c1088, c1090, c1092, c1093, c1095, c1097, c1099, c1101, c1103, c1105, c1107, c1109, c1111, c1113, c1115, c1117, c1119, c1120, c1122, c1124, c1126, c1128, c1130, c1132, c1134, c1136, c1138, c1140, c1142, c1144, c1146, c1147, c1149, c1151, c1153, c1155, c1157, c1159, c1161, c1163, c1165, c1167, c1169, c1171, c1173, c1174, c1176, c1178, c1180, c1182, c1184, c1186, c1188, c1190, c1192, c1194, c1196, c1198, c1200, c1201, c1203, c1205, c1207, c1209, c1211, c1213, c1215, c1217, c1219, c1221, c1223, c1225, c1227, c1228, c1230, c1232, c1234, c1236, c1238, c1240, c1242, c1244, c1246, c1248, c1250, c1252, c1254, c1255, c1257, c1259, c1261, c1263, c1265, c1267, c1269, c1271, c1273, c1275, c1277, c1279, c1281, c1282, c1284, c1286, c1288, c1290, c1292, c1294, c1296, c1298, c1300, c1302, c1304, c1306, c1308, c1309, c1311, c1313, c1315, c1317, c1319, c1321, c1323, c1325, c1327, c1329, c1331, c1333, c1335, c1336, c1338, c1340, c1342, c1344, c1346, c1348, c1350, c1352, c1354, c1356, c1358, c1360, c1362, c1363, c1365, c1367, c1369, c1371, c1373, c1375, c1377, c1379, c1381, c1383, c1385, c1387, c1389, c1390, c1392, c1394, c1396, c1398, c1400, c1402, c1404, c1406, c1408, c1410, c1412, c1414, c1416, c1417, c1419, c1421, c1423, c1425, c1427, c1429, c1431, c1433, c1435, c1437, c1439, c1441, c1443, c1444, c1446, c1448, c1450, c1452, c1454, c1456, c1458, c1460, c1462, c1464, c1466, c1468, c1470, c1471, c1473, c1475, c1477, c1479, c1481, c1483, c1485, c1487, c1489, c1491, c1493, c1495, c1497, c1498, c1500, c1502, c1504, c1506, c1508, c1510, c1512, c1514, c1516, c1518, c1520, c1522, c1524, c1525, c1527, c1529, c1531, c1533, c1535, c1537, c1539, c1541, c1543, c1545, c1547, c1549, c1551, c1552, c1554, c1556, c1558, c1560, c1562, c1564, c1566, c1568, c1570, c1572, c1574, c1576, c1578, c1579, c1581, c1583, c1585, c1587, c1589, c1591, c1593, c1595, c1597, c1599, c1601, c1603, c1605, c1606, c1608, c1610, c1612, c1614, c1616, c1618, c1620, c1622, c1624, c1626, c1628, c1630, c1632, c1633, c1635, c1637, c1639, c1641, c1643, c1645, c1647, c1649, c1651, c1653, c1655, c1657, c1659, c1660, c1662, c1664, c1666, c1668, c1670, c1672, c1674, c1676, c1678, c1680, c1682, c1684, c1686, c1687, c1689, c1691, c1693, c1695, c1697, c1699, c1701, c1703, c1705, c1707, c1709, c1711, c1713, c1714, c1716, c1718, c1720, c1722, c1724, c1726, c1728, c1730, c1732, c1734, c1736, c1738, c1740, c1741, c1743, c1745, c1747, c1749, c1751, c1753, c1755, c1757, c1759, c1761, c1763, c1765, c1767, c1768, c1770, c1772, c1774, c1776, c1778, c1780, c1782, c1784, c1786, c1788, c1790, c1792, c1794, c1795, c1797 FROM AMOSTRAS WHERE ID = "+id;
          con.query(sql,function(err, result){
            if(err) throw err;
            resolve(result);
          })
        })
    });
  },
  getAllComp: () => {
    return new Promise((resolve,error) => {
        const con = Connection.getConnection();
        con.connect(function(err) {
          if (err) throw err;
          console.log('Connected!');
          var sql = "select c525, c526, c528, c530, c532, c534, c536, c538, c540, c542, c544, c546, c548, c550, c552, c553, c555, c557, c559, c561, c563, c565, c567, c569, c571, c573, c575, c577, c579, c580, c582, c584, c586, c588, c590, c592, c594, c596, c598, c600, c602, c604, c606, c607, c609, c611, c613, c615, c617, c619, c621, c623, c625, c627, c629, c631, c633, c634, c636, c638, c640, c642, c644, c646, c648, c650, c652, c654, c656, c658, c660, c661, c663, c665, c667, c669, c671, c673, c675, c677, c679, c681, c683, c685, c687, c688, c690, c692, c694, c696, c698, c700, c702, c704, c706, c708, c710, c712, c714, c715, c717, c719, c721, c723, c725, c727, c729, c731, c733, c735, c737, c739, c741, c742, c744, c746, c748, c750, c752, c754, c756, c758, c760, c762, c764, c766, c768, c769, c771, c773, c775, c777, c779, c781, c783, c785, c787, c789, c791, c793, c795, c796, c798, c800, c802, c804, c806, c808, c810, c812, c814, c816, c818, c820, c822, c823, c825, c827, c829, c831, c833, c835, c837, c839, c841, c843, c845, c847, c849, c850, c852, c854, c856, c858, c860, c862, c864, c866, c868, c870, c872, c874, c876, c877, c879, c881, c883, c885, c887, c889, c891, c893, c895, c897, c899, c901, c903, c904, c906, c908, c910, c912, c914, c916, c918, c920, c922, c924, c926, c928, c930, c931, c933, c935, c937, c939, c941, c943, c945, c947, c949, c951, c953, c955, c957, c958, c960, c962, c964, c966, c968, c970, c972, c974, c976, c978, c980, c982, c984, c985, c987, c989, c991, c993, c995, c997, c999, c1001, c1003, c1005, c1007, c1009, c1011, c1012, c1014, c1016, c1018, c1020, c1022, c1024, c1026, c1028, c1030, c1032, c1034, c1036, c1038, c1039, c1041, c1043, c1045, c1047, c1049, c1051, c1053, c1055, c1057, c1059, c1061, c1063, c1065, c1066, c1068, c1070, c1072, c1074, c1076, c1078, c1080, c1082, c1084, c1086, c1088, c1090, c1092, c1093, c1095, c1097, c1099, c1101, c1103, c1105, c1107, c1109, c1111, c1113, c1115, c1117, c1119, c1120, c1122, c1124, c1126, c1128, c1130, c1132, c1134, c1136, c1138, c1140, c1142, c1144, c1146, c1147, c1149, c1151, c1153, c1155, c1157, c1159, c1161, c1163, c1165, c1167, c1169, c1171, c1173, c1174, c1176, c1178, c1180, c1182, c1184, c1186, c1188, c1190, c1192, c1194, c1196, c1198, c1200, c1201, c1203, c1205, c1207, c1209, c1211, c1213, c1215, c1217, c1219, c1221, c1223, c1225, c1227, c1228, c1230, c1232, c1234, c1236, c1238, c1240, c1242, c1244, c1246, c1248, c1250, c1252, c1254, c1255, c1257, c1259, c1261, c1263, c1265, c1267, c1269, c1271, c1273, c1275, c1277, c1279, c1281, c1282, c1284, c1286, c1288, c1290, c1292, c1294, c1296, c1298, c1300, c1302, c1304, c1306, c1308, c1309, c1311, c1313, c1315, c1317, c1319, c1321, c1323, c1325, c1327, c1329, c1331, c1333, c1335, c1336, c1338, c1340, c1342, c1344, c1346, c1348, c1350, c1352, c1354, c1356, c1358, c1360, c1362, c1363, c1365, c1367, c1369, c1371, c1373, c1375, c1377, c1379, c1381, c1383, c1385, c1387, c1389, c1390, c1392, c1394, c1396, c1398, c1400, c1402, c1404, c1406, c1408, c1410, c1412, c1414, c1416, c1417, c1419, c1421, c1423, c1425, c1427, c1429, c1431, c1433, c1435, c1437, c1439, c1441, c1443, c1444, c1446, c1448, c1450, c1452, c1454, c1456, c1458, c1460, c1462, c1464, c1466, c1468, c1470, c1471, c1473, c1475, c1477, c1479, c1481, c1483, c1485, c1487, c1489, c1491, c1493, c1495, c1497, c1498, c1500, c1502, c1504, c1506, c1508, c1510, c1512, c1514, c1516, c1518, c1520, c1522, c1524, c1525, c1527, c1529, c1531, c1533, c1535, c1537, c1539, c1541, c1543, c1545, c1547, c1549, c1551, c1552, c1554, c1556, c1558, c1560, c1562, c1564, c1566, c1568, c1570, c1572, c1574, c1576, c1578, c1579, c1581, c1583, c1585, c1587, c1589, c1591, c1593, c1595, c1597, c1599, c1601, c1603, c1605, c1606, c1608, c1610, c1612, c1614, c1616, c1618, c1620, c1622, c1624, c1626, c1628, c1630, c1632, c1633, c1635, c1637, c1639, c1641, c1643, c1645, c1647, c1649, c1651, c1653, c1655, c1657, c1659, c1660, c1662, c1664, c1666, c1668, c1670, c1672, c1674, c1676, c1678, c1680, c1682, c1684, c1686, c1687, c1689, c1691, c1693, c1695, c1697, c1699, c1701, c1703, c1705, c1707, c1709, c1711, c1713, c1714, c1716, c1718, c1720, c1722, c1724, c1726, c1728, c1730, c1732, c1734, c1736, c1738, c1740, c1741, c1743, c1745, c1747, c1749, c1751, c1753, c1755, c1757, c1759, c1761, c1763, c1765, c1767, c1768, c1770, c1772, c1774, c1776, c1778, c1780, c1782, c1784, c1786, c1788, c1790, c1792, c1794, c1795, c1797 from AMOSTRAS"; con.query(sql,function(err, result){
            if(err) throw err;
            resolve(result);
          })
        })
    });
  },
  getAllCompData: () => {
    return new Promise((resolve,error) => {
        const con = Connection.getConnection();
        con.connect(function(err) {
          if (err) throw err;
          console.log('Connected!');
          var sql = "select data_entrada,c525, c526, c528, c530, c532, c534, c536, c538, c540, c542, c544, c546, c548, c550, c552, c553, c555, c557, c559, c561, c563, c565, c567, c569, c571, c573, c575, c577, c579, c580, c582, c584, c586, c588, c590, c592, c594, c596, c598, c600, c602, c604, c606, c607, c609, c611, c613, c615, c617, c619, c621, c623, c625, c627, c629, c631, c633, c634, c636, c638, c640, c642, c644, c646, c648, c650, c652, c654, c656, c658, c660, c661, c663, c665, c667, c669, c671, c673, c675, c677, c679, c681, c683, c685, c687, c688, c690, c692, c694, c696, c698, c700, c702, c704, c706, c708, c710, c712, c714, c715, c717, c719, c721, c723, c725, c727, c729, c731, c733, c735, c737, c739, c741, c742, c744, c746, c748, c750, c752, c754, c756, c758, c760, c762, c764, c766, c768, c769, c771, c773, c775, c777, c779, c781, c783, c785, c787, c789, c791, c793, c795, c796, c798, c800, c802, c804, c806, c808, c810, c812, c814, c816, c818, c820, c822, c823, c825, c827, c829, c831, c833, c835, c837, c839, c841, c843, c845, c847, c849, c850, c852, c854, c856, c858, c860, c862, c864, c866, c868, c870, c872, c874, c876, c877, c879, c881, c883, c885, c887, c889, c891, c893, c895, c897, c899, c901, c903, c904, c906, c908, c910, c912, c914, c916, c918, c920, c922, c924, c926, c928, c930, c931, c933, c935, c937, c939, c941, c943, c945, c947, c949, c951, c953, c955, c957, c958, c960, c962, c964, c966, c968, c970, c972, c974, c976, c978, c980, c982, c984, c985, c987, c989, c991, c993, c995, c997, c999, c1001, c1003, c1005, c1007, c1009, c1011, c1012, c1014, c1016, c1018, c1020, c1022, c1024, c1026, c1028, c1030, c1032, c1034, c1036, c1038, c1039, c1041, c1043, c1045, c1047, c1049, c1051, c1053, c1055, c1057, c1059, c1061, c1063, c1065, c1066, c1068, c1070, c1072, c1074, c1076, c1078, c1080, c1082, c1084, c1086, c1088, c1090, c1092, c1093, c1095, c1097, c1099, c1101, c1103, c1105, c1107, c1109, c1111, c1113, c1115, c1117, c1119, c1120, c1122, c1124, c1126, c1128, c1130, c1132, c1134, c1136, c1138, c1140, c1142, c1144, c1146, c1147, c1149, c1151, c1153, c1155, c1157, c1159, c1161, c1163, c1165, c1167, c1169, c1171, c1173, c1174, c1176, c1178, c1180, c1182, c1184, c1186, c1188, c1190, c1192, c1194, c1196, c1198, c1200, c1201, c1203, c1205, c1207, c1209, c1211, c1213, c1215, c1217, c1219, c1221, c1223, c1225, c1227, c1228, c1230, c1232, c1234, c1236, c1238, c1240, c1242, c1244, c1246, c1248, c1250, c1252, c1254, c1255, c1257, c1259, c1261, c1263, c1265, c1267, c1269, c1271, c1273, c1275, c1277, c1279, c1281, c1282, c1284, c1286, c1288, c1290, c1292, c1294, c1296, c1298, c1300, c1302, c1304, c1306, c1308, c1309, c1311, c1313, c1315, c1317, c1319, c1321, c1323, c1325, c1327, c1329, c1331, c1333, c1335, c1336, c1338, c1340, c1342, c1344, c1346, c1348, c1350, c1352, c1354, c1356, c1358, c1360, c1362, c1363, c1365, c1367, c1369, c1371, c1373, c1375, c1377, c1379, c1381, c1383, c1385, c1387, c1389, c1390, c1392, c1394, c1396, c1398, c1400, c1402, c1404, c1406, c1408, c1410, c1412, c1414, c1416, c1417, c1419, c1421, c1423, c1425, c1427, c1429, c1431, c1433, c1435, c1437, c1439, c1441, c1443, c1444, c1446, c1448, c1450, c1452, c1454, c1456, c1458, c1460, c1462, c1464, c1466, c1468, c1470, c1471, c1473, c1475, c1477, c1479, c1481, c1483, c1485, c1487, c1489, c1491, c1493, c1495, c1497, c1498, c1500, c1502, c1504, c1506, c1508, c1510, c1512, c1514, c1516, c1518, c1520, c1522, c1524, c1525, c1527, c1529, c1531, c1533, c1535, c1537, c1539, c1541, c1543, c1545, c1547, c1549, c1551, c1552, c1554, c1556, c1558, c1560, c1562, c1564, c1566, c1568, c1570, c1572, c1574, c1576, c1578, c1579, c1581, c1583, c1585, c1587, c1589, c1591, c1593, c1595, c1597, c1599, c1601, c1603, c1605, c1606, c1608, c1610, c1612, c1614, c1616, c1618, c1620, c1622, c1624, c1626, c1628, c1630, c1632, c1633, c1635, c1637, c1639, c1641, c1643, c1645, c1647, c1649, c1651, c1653, c1655, c1657, c1659, c1660, c1662, c1664, c1666, c1668, c1670, c1672, c1674, c1676, c1678, c1680, c1682, c1684, c1686, c1687, c1689, c1691, c1693, c1695, c1697, c1699, c1701, c1703, c1705, c1707, c1709, c1711, c1713, c1714, c1716, c1718, c1720, c1722, c1724, c1726, c1728, c1730, c1732, c1734, c1736, c1738, c1740, c1741, c1743, c1745, c1747, c1749, c1751, c1753, c1755, c1757, c1759, c1761, c1763, c1765, c1767, c1768, c1770, c1772, c1774, c1776, c1778, c1780, c1782, c1784, c1786, c1788, c1790, c1792, c1794, c1795, c1797 from AMOSTRAS"; con.query(sql,function(err, result){
            if(err) throw err;
            resolve(result);
          })
        })
    });
  },
  getAllButComp: (amotraToRemove) => {
    return new Promise((resolve,error) => {
        const con = Connection.getConnection();
        con.connect(function(err) {
          if (err) throw err;
          console.log('Connected!');
          var sql = "select c525, c526, c528, c530, c532, c534, c536, c538, c540, c542, c544, c546, c548, c550, c552, c553, c555, c557, c559, c561, c563, c565, c567, c569, c571, c573, c575, c577, c579, c580, c582, c584, c586, c588, c590, c592, c594, c596, c598, c600, c602, c604, c606, c607, c609, c611, c613, c615, c617, c619, c621, c623, c625, c627, c629, c631, c633, c634, c636, c638, c640, c642, c644, c646, c648, c650, c652, c654, c656, c658, c660, c661, c663, c665, c667, c669, c671, c673, c675, c677, c679, c681, c683, c685, c687, c688, c690, c692, c694, c696, c698, c700, c702, c704, c706, c708, c710, c712, c714, c715, c717, c719, c721, c723, c725, c727, c729, c731, c733, c735, c737, c739, c741, c742, c744, c746, c748, c750, c752, c754, c756, c758, c760, c762, c764, c766, c768, c769, c771, c773, c775, c777, c779, c781, c783, c785, c787, c789, c791, c793, c795, c796, c798, c800, c802, c804, c806, c808, c810, c812, c814, c816, c818, c820, c822, c823, c825, c827, c829, c831, c833, c835, c837, c839, c841, c843, c845, c847, c849, c850, c852, c854, c856, c858, c860, c862, c864, c866, c868, c870, c872, c874, c876, c877, c879, c881, c883, c885, c887, c889, c891, c893, c895, c897, c899, c901, c903, c904, c906, c908, c910, c912, c914, c916, c918, c920, c922, c924, c926, c928, c930, c931, c933, c935, c937, c939, c941, c943, c945, c947, c949, c951, c953, c955, c957, c958, c960, c962, c964, c966, c968, c970, c972, c974, c976, c978, c980, c982, c984, c985, c987, c989, c991, c993, c995, c997, c999, c1001, c1003, c1005, c1007, c1009, c1011, c1012, c1014, c1016, c1018, c1020, c1022, c1024, c1026, c1028, c1030, c1032, c1034, c1036, c1038, c1039, c1041, c1043, c1045, c1047, c1049, c1051, c1053, c1055, c1057, c1059, c1061, c1063, c1065, c1066, c1068, c1070, c1072, c1074, c1076, c1078, c1080, c1082, c1084, c1086, c1088, c1090, c1092, c1093, c1095, c1097, c1099, c1101, c1103, c1105, c1107, c1109, c1111, c1113, c1115, c1117, c1119, c1120, c1122, c1124, c1126, c1128, c1130, c1132, c1134, c1136, c1138, c1140, c1142, c1144, c1146, c1147, c1149, c1151, c1153, c1155, c1157, c1159, c1161, c1163, c1165, c1167, c1169, c1171, c1173, c1174, c1176, c1178, c1180, c1182, c1184, c1186, c1188, c1190, c1192, c1194, c1196, c1198, c1200, c1201, c1203, c1205, c1207, c1209, c1211, c1213, c1215, c1217, c1219, c1221, c1223, c1225, c1227, c1228, c1230, c1232, c1234, c1236, c1238, c1240, c1242, c1244, c1246, c1248, c1250, c1252, c1254, c1255, c1257, c1259, c1261, c1263, c1265, c1267, c1269, c1271, c1273, c1275, c1277, c1279, c1281, c1282, c1284, c1286, c1288, c1290, c1292, c1294, c1296, c1298, c1300, c1302, c1304, c1306, c1308, c1309, c1311, c1313, c1315, c1317, c1319, c1321, c1323, c1325, c1327, c1329, c1331, c1333, c1335, c1336, c1338, c1340, c1342, c1344, c1346, c1348, c1350, c1352, c1354, c1356, c1358, c1360, c1362, c1363, c1365, c1367, c1369, c1371, c1373, c1375, c1377, c1379, c1381, c1383, c1385, c1387, c1389, c1390, c1392, c1394, c1396, c1398, c1400, c1402, c1404, c1406, c1408, c1410, c1412, c1414, c1416, c1417, c1419, c1421, c1423, c1425, c1427, c1429, c1431, c1433, c1435, c1437, c1439, c1441, c1443, c1444, c1446, c1448, c1450, c1452, c1454, c1456, c1458, c1460, c1462, c1464, c1466, c1468, c1470, c1471, c1473, c1475, c1477, c1479, c1481, c1483, c1485, c1487, c1489, c1491, c1493, c1495, c1497, c1498, c1500, c1502, c1504, c1506, c1508, c1510, c1512, c1514, c1516, c1518, c1520, c1522, c1524, c1525, c1527, c1529, c1531, c1533, c1535, c1537, c1539, c1541, c1543, c1545, c1547, c1549, c1551, c1552, c1554, c1556, c1558, c1560, c1562, c1564, c1566, c1568, c1570, c1572, c1574, c1576, c1578, c1579, c1581, c1583, c1585, c1587, c1589, c1591, c1593, c1595, c1597, c1599, c1601, c1603, c1605, c1606, c1608, c1610, c1612, c1614, c1616, c1618, c1620, c1622, c1624, c1626, c1628, c1630, c1632, c1633, c1635, c1637, c1639, c1641, c1643, c1645, c1647, c1649, c1651, c1653, c1655, c1657, c1659, c1660, c1662, c1664, c1666, c1668, c1670, c1672, c1674, c1676, c1678, c1680, c1682, c1684, c1686, c1687, c1689, c1691, c1693, c1695, c1697, c1699, c1701, c1703, c1705, c1707, c1709, c1711, c1713, c1714, c1716, c1718, c1720, c1722, c1724, c1726, c1728, c1730, c1732, c1734, c1736, c1738, c1740, c1741, c1743, c1745, c1747, c1749, c1751, c1753, c1755, c1757, c1759, c1761, c1763, c1765, c1767, c1768, c1770, c1772, c1774, c1776, c1778, c1780, c1782, c1784, c1786, c1788, c1790, c1792, c1794, c1795, c1797 from AMOSTRAS where id != "+amotraToRemove; con.query(sql,function(err, result){
            if(err) throw err;
            resolve(result);
          })
        })
    });
  },
  getAllMax: () => {
    return new Promise((resolve,error) => {
        const con = Connection.getConnection();
        con.connect(function(err) {
          if (err) throw err;
          console.log('Connected!');
          var sql = "SELECT MAX(c525), MAX(c526), MAX(c528), MAX(c530), MAX(c532), MAX(c534), MAX(c536), MAX(c538), MAX(c540), MAX(c542), MAX(c544), MAX(c546), MAX(c548), MAX(c550), MAX(c552), MAX(c553), MAX(c555), MAX(c557), MAX(c559), MAX(c561), MAX(c563), MAX(c565), MAX(c567), MAX(c569), MAX(c571), MAX(c573), MAX(c575), MAX(c577), MAX(c579), MAX(c580), MAX(c582), MAX(c584), MAX(c586), MAX(c588), MAX(c590), MAX(c592), MAX(c594), MAX(c596), MAX(c598), MAX(c600), MAX(c602), MAX(c604), MAX(c606), MAX(c607), MAX(c609), MAX(c611), MAX(c613), MAX(c615), MAX(c617), MAX(c619), MAX(c621), MAX(c623), MAX(c625), MAX(c627), MAX(c629), MAX(c631), MAX(c633), MAX(c634), MAX(c636), MAX(c638), MAX(c640), MAX(c642), MAX(c644), MAX(c646), MAX(c648), MAX(c650), MAX(c652), MAX(c654), MAX(c656), MAX(c658), MAX(c660), MAX(c661), MAX(c663), MAX(c665), MAX(c667), MAX(c669), MAX(c671), MAX(c673), MAX(c675), MAX(c677), MAX(c679), MAX(c681), MAX(c683), MAX(c685), MAX(c687), MAX(c688), MAX(c690), MAX(c692), MAX(c694), MAX(c696), MAX(c698), MAX(c700), MAX(c702), MAX(c704), MAX(c706), MAX(c708), MAX(c710), MAX(c712), MAX(c714), MAX(c715), MAX(c717), MAX(c719), MAX(c721), MAX(c723), MAX(c725), MAX(c727), MAX(c729), MAX(c731), MAX(c733), MAX(c735), MAX(c737), MAX(c739), MAX(c741), MAX(c742), MAX(c744), MAX(c746), MAX(c748), MAX(c750), MAX(c752), MAX(c754), MAX(c756), MAX(c758), MAX(c760), MAX(c762), MAX(c764), MAX(c766), MAX(c768), MAX(c769), MAX(c771), MAX(c773), MAX(c775), MAX(c777), MAX(c779), MAX(c781), MAX(c783), MAX(c785), MAX(c787), MAX(c789), MAX(c791), MAX(c793), MAX(c795), MAX(c796), MAX(c798), MAX(c800), MAX(c802), MAX(c804), MAX(c806), MAX(c808), MAX(c810), MAX(c812), MAX(c814), MAX(c816), MAX(c818), MAX(c820), MAX(c822), MAX(c823), MAX(c825), MAX(c827), MAX(c829), MAX(c831), MAX(c833), MAX(c835), MAX(c837), MAX(c839), MAX(c841), MAX(c843), MAX(c845), MAX(c847), MAX(c849), MAX(c850), MAX(c852), MAX(c854), MAX(c856), MAX(c858), MAX(c860), MAX(c862), MAX(c864), MAX(c866), MAX(c868), MAX(c870), MAX(c872), MAX(c874), MAX(c876), MAX(c877), MAX(c879), MAX(c881), MAX(c883), MAX(c885), MAX(c887), MAX(c889), MAX(c891), MAX(c893), MAX(c895), MAX(c897), MAX(c899), MAX(c901), MAX(c903), MAX(c904), MAX(c906), MAX(c908), MAX(c910), MAX(c912), MAX(c914), MAX(c916), MAX(c918), MAX(c920), MAX(c922), MAX(c924), MAX(c926), MAX(c928), MAX(c930), MAX(c931), MAX(c933), MAX(c935), MAX(c937), MAX(c939), MAX(c941), MAX(c943), MAX(c945), MAX(c947), MAX(c949), MAX(c951), MAX(c953), MAX(c955), MAX(c957), MAX(c958), MAX(c960), MAX(c962), MAX(c964), MAX(c966), MAX(c968), MAX(c970), MAX(c972), MAX(c974), MAX(c976), MAX(c978), MAX(c980), MAX(c982), MAX(c984), MAX(c985), MAX(c987), MAX(c989), MAX(c991), MAX(c993), MAX(c995), MAX(c997), MAX(c999), MAX(c1001), MAX(c1003), MAX(c1005), MAX(c1007), MAX(c1009), MAX(c1011), MAX(c1012), MAX(c1014), MAX(c1016), MAX(c1018), MAX(c1020), MAX(c1022), MAX(c1024), MAX(c1026), MAX(c1028), MAX(c1030), MAX(c1032), MAX(c1034), MAX(c1036), MAX(c1038), MAX(c1039), MAX(c1041), MAX(c1043), MAX(c1045), MAX(c1047), MAX(c1049), MAX(c1051), MAX(c1053), MAX(c1055), MAX(c1057), MAX(c1059), MAX(c1061), MAX(c1063), MAX(c1065), MAX(c1066), MAX(c1068), MAX(c1070), MAX(c1072), MAX(c1074), MAX(c1076), MAX(c1078), MAX(c1080), MAX(c1082), MAX(c1084), MAX(c1086), MAX(c1088), MAX(c1090), MAX(c1092), MAX(c1093), MAX(c1095), MAX(c1097), MAX(c1099), MAX(c1101), MAX(c1103), MAX(c1105), MAX(c1107), MAX(c1109), MAX(c1111), MAX(c1113), MAX(c1115), MAX(c1117), MAX(c1119), MAX(c1120), MAX(c1122), MAX(c1124), MAX(c1126), MAX(c1128), MAX(c1130), MAX(c1132), MAX(c1134), MAX(c1136), MAX(c1138), MAX(c1140), MAX(c1142), MAX(c1144), MAX(c1146), MAX(c1147), MAX(c1149), MAX(c1151), MAX(c1153), MAX(c1155), MAX(c1157), MAX(c1159), MAX(c1161), MAX(c1163), MAX(c1165), MAX(c1167), MAX(c1169), MAX(c1171), MAX(c1173), MAX(c1174), MAX(c1176), MAX(c1178), MAX(c1180), MAX(c1182), MAX(c1184), MAX(c1186), MAX(c1188), MAX(c1190), MAX(c1192), MAX(c1194), MAX(c1196), MAX(c1198), MAX(c1200), MAX(c1201), MAX(c1203), MAX(c1205), MAX(c1207), MAX(c1209), MAX(c1211), MAX(c1213), MAX(c1215), MAX(c1217), MAX(c1219), MAX(c1221), MAX(c1223), MAX(c1225), MAX(c1227), MAX(c1228), MAX(c1230), MAX(c1232), MAX(c1234), MAX(c1236), MAX(c1238), MAX(c1240), MAX(c1242), MAX(c1244), MAX(c1246), MAX(c1248), MAX(c1250), MAX(c1252), MAX(c1254), MAX(c1255), MAX(c1257), MAX(c1259), MAX(c1261), MAX(c1263), MAX(c1265), MAX(c1267), MAX(c1269), MAX(c1271), MAX(c1273), MAX(c1275), MAX(c1277), MAX(c1279), MAX(c1281), MAX(c1282), MAX(c1284), MAX(c1286), MAX(c1288), MAX(c1290), MAX(c1292), MAX(c1294), MAX(c1296), MAX(c1298), MAX(c1300), MAX(c1302), MAX(c1304), MAX(c1306), MAX(c1308), MAX(c1309), MAX(c1311), MAX(c1313), MAX(c1315), MAX(c1317), MAX(c1319), MAX(c1321), MAX(c1323), MAX(c1325), MAX(c1327), MAX(c1329), MAX(c1331), MAX(c1333), MAX(c1335), MAX(c1336), MAX(c1338), MAX(c1340), MAX(c1342), MAX(c1344), MAX(c1346), MAX(c1348), MAX(c1350), MAX(c1352), MAX(c1354), MAX(c1356), MAX(c1358), MAX(c1360), MAX(c1362), MAX(c1363), MAX(c1365), MAX(c1367), MAX(c1369), MAX(c1371), MAX(c1373), MAX(c1375), MAX(c1377), MAX(c1379), MAX(c1381), MAX(c1383), MAX(c1385), MAX(c1387), MAX(c1389), MAX(c1390), MAX(c1392), MAX(c1394), MAX(c1396), MAX(c1398), MAX(c1400), MAX(c1402), MAX(c1404), MAX(c1406), MAX(c1408), MAX(c1410), MAX(c1412), MAX(c1414), MAX(c1416), MAX(c1417), MAX(c1419), MAX(c1421), MAX(c1423), MAX(c1425), MAX(c1427), MAX(c1429), MAX(c1431), MAX(c1433), MAX(c1435), MAX(c1437), MAX(c1439), MAX(c1441), MAX(c1443), MAX(c1444), MAX(c1446), MAX(c1448), MAX(c1450), MAX(c1452), MAX(c1454), MAX(c1456), MAX(c1458), MAX(c1460), MAX(c1462), MAX(c1464), MAX(c1466), MAX(c1468), MAX(c1470), MAX(c1471), MAX(c1473), MAX(c1475), MAX(c1477), MAX(c1479), MAX(c1481), MAX(c1483), MAX(c1485), MAX(c1487), MAX(c1489), MAX(c1491), MAX(c1493), MAX(c1495), MAX(c1497), MAX(c1498), MAX(c1500), MAX(c1502), MAX(c1504), MAX(c1506), MAX(c1508), MAX(c1510), MAX(c1512), MAX(c1514), MAX(c1516), MAX(c1518), MAX(c1520), MAX(c1522), MAX(c1524), MAX(c1525), MAX(c1527), MAX(c1529), MAX(c1531), MAX(c1533), MAX(c1535), MAX(c1537), MAX(c1539), MAX(c1541), MAX(c1543), MAX(c1545), MAX(c1547), MAX(c1549), MAX(c1551), MAX(c1552), MAX(c1554), MAX(c1556), MAX(c1558), MAX(c1560), MAX(c1562), MAX(c1564), MAX(c1566), MAX(c1568), MAX(c1570), MAX(c1572), MAX(c1574), MAX(c1576), MAX(c1578), MAX(c1579), MAX(c1581), MAX(c1583), MAX(c1585), MAX(c1587), MAX(c1589), MAX(c1591), MAX(c1593), MAX(c1595), MAX(c1597), MAX(c1599), MAX(c1601), MAX(c1603), MAX(c1605), MAX(c1606), MAX(c1608), MAX(c1610), MAX(c1612), MAX(c1614), MAX(c1616), MAX(c1618), MAX(c1620), MAX(c1622), MAX(c1624), MAX(c1626), MAX(c1628), MAX(c1630), MAX(c1632), MAX(c1633), MAX(c1635), MAX(c1637), MAX(c1639), MAX(c1641), MAX(c1643), MAX(c1645), MAX(c1647), MAX(c1649), MAX(c1651), MAX(c1653), MAX(c1655), MAX(c1657), MAX(c1659), MAX(c1660), MAX(c1662), MAX(c1664), MAX(c1666), MAX(c1668), MAX(c1670), MAX(c1672), MAX(c1674), MAX(c1676), MAX(c1678), MAX(c1680), MAX(c1682), MAX(c1684), MAX(c1686), MAX(c1687), MAX(c1689), MAX(c1691), MAX(c1693), MAX(c1695), MAX(c1697), MAX(c1699), MAX(c1701), MAX(c1703), MAX(c1705), MAX(c1707), MAX(c1709), MAX(c1711), MAX(c1713), MAX(c1714), MAX(c1716), MAX(c1718), MAX(c1720), MAX(c1722), MAX(c1724), MAX(c1726), MAX(c1728), MAX(c1730), MAX(c1732), MAX(c1734), MAX(c1736), MAX(c1738), MAX(c1740), MAX(c1741), MAX(c1743), MAX(c1745), MAX(c1747), MAX(c1749), MAX(c1751), MAX(c1753), MAX(c1755), MAX(c1757), MAX(c1759), MAX(c1761), MAX(c1763), MAX(c1765), MAX(c1767), MAX(c1768), MAX(c1770), MAX(c1772), MAX(c1774), MAX(c1776), MAX(c1778), MAX(c1780), MAX(c1782), MAX(c1784), MAX(c1786), MAX(c1788), MAX(c1790), MAX(c1792), MAX(c1794), MAX(c1795), MAX(c1797) FROM AMOSTRAS";
           con.query(sql,function(err, result){
            if(err) throw err;
            resolve(result);
          })
        })
    });
  },
  getAllMin: () => {
    return new Promise((resolve,error) => {
        const con = Connection.getConnection();
        con.connect(function(err) {
          if (err) throw err;
          console.log('Connected!');
          var sql = "SELECT MIN(c525), MIN(c526), MIN(c528), MIN(c530), MIN(c532), MIN(c534), MIN(c536), MIN(c538), MIN(c540), MIN(c542), MIN(c544), MIN(c546), MIN(c548), MIN(c550), MIN(c552), MIN(c553), MIN(c555), MIN(c557), MIN(c559), MIN(c561), MIN(c563), MIN(c565), MIN(c567), MIN(c569), MIN(c571), MIN(c573), MIN(c575), MIN(c577), MIN(c579), MIN(c580), MIN(c582), MIN(c584), MIN(c586), MIN(c588), MIN(c590), MIN(c592), MIN(c594), MIN(c596), MIN(c598), MIN(c600), MIN(c602), MIN(c604), MIN(c606), MIN(c607), MIN(c609), MIN(c611), MIN(c613), MIN(c615), MIN(c617), MIN(c619), MIN(c621), MIN(c623), MIN(c625), MIN(c627), MIN(c629), MIN(c631), MIN(c633), MIN(c634), MIN(c636), MIN(c638), MIN(c640), MIN(c642), MIN(c644), MIN(c646), MIN(c648), MIN(c650), MIN(c652), MIN(c654), MIN(c656), MIN(c658), MIN(c660), MIN(c661), MIN(c663), MIN(c665), MIN(c667), MIN(c669), MIN(c671), MIN(c673), MIN(c675), MIN(c677), MIN(c679), MIN(c681), MIN(c683), MIN(c685), MIN(c687), MIN(c688), MIN(c690), MIN(c692), MIN(c694), MIN(c696), MIN(c698), MIN(c700), MIN(c702), MIN(c704), MIN(c706), MIN(c708), MIN(c710), MIN(c712), MIN(c714), MIN(c715), MIN(c717), MIN(c719), MIN(c721), MIN(c723), MIN(c725), MIN(c727), MIN(c729), MIN(c731), MIN(c733), MIN(c735), MIN(c737), MIN(c739), MIN(c741), MIN(c742), MIN(c744), MIN(c746), MIN(c748), MIN(c750), MIN(c752), MIN(c754), MIN(c756), MIN(c758), MIN(c760), MIN(c762), MIN(c764), MIN(c766), MIN(c768), MIN(c769), MIN(c771), MIN(c773), MIN(c775), MIN(c777), MIN(c779), MIN(c781), MIN(c783), MIN(c785), MIN(c787), MIN(c789), MIN(c791), MIN(c793), MIN(c795), MIN(c796), MIN(c798), MIN(c800), MIN(c802), MIN(c804), MIN(c806), MIN(c808), MIN(c810), MIN(c812), MIN(c814), MIN(c816), MIN(c818), MIN(c820), MIN(c822), MIN(c823), MIN(c825), MIN(c827), MIN(c829), MIN(c831), MIN(c833), MIN(c835), MIN(c837), MIN(c839), MIN(c841), MIN(c843), MIN(c845), MIN(c847), MIN(c849), MIN(c850), MIN(c852), MIN(c854), MIN(c856), MIN(c858), MIN(c860), MIN(c862), MIN(c864), MIN(c866), MIN(c868), MIN(c870), MIN(c872), MIN(c874), MIN(c876), MIN(c877), MIN(c879), MIN(c881), MIN(c883), MIN(c885), MIN(c887), MIN(c889), MIN(c891), MIN(c893), MIN(c895), MIN(c897), MIN(c899), MIN(c901), MIN(c903), MIN(c904), MIN(c906), MIN(c908), MIN(c910), MIN(c912), MIN(c914), MIN(c916), MIN(c918), MIN(c920), MIN(c922), MIN(c924), MIN(c926), MIN(c928), MIN(c930), MIN(c931), MIN(c933), MIN(c935), MIN(c937), MIN(c939), MIN(c941), MIN(c943), MIN(c945), MIN(c947), MIN(c949), MIN(c951), MIN(c953), MIN(c955), MIN(c957), MIN(c958), MIN(c960), MIN(c962), MIN(c964), MIN(c966), MIN(c968), MIN(c970), MIN(c972), MIN(c974), MIN(c976), MIN(c978), MIN(c980), MIN(c982), MIN(c984), MIN(c985), MIN(c987), MIN(c989), MIN(c991), MIN(c993), MIN(c995), MIN(c997), MIN(c999), MIN(c1001), MIN(c1003), MIN(c1005), MIN(c1007), MIN(c1009), MIN(c1011), MIN(c1012), MIN(c1014), MIN(c1016), MIN(c1018), MIN(c1020), MIN(c1022), MIN(c1024), MIN(c1026), MIN(c1028), MIN(c1030), MIN(c1032), MIN(c1034), MIN(c1036), MIN(c1038), MIN(c1039), MIN(c1041), MIN(c1043), MIN(c1045), MIN(c1047), MIN(c1049), MIN(c1051), MIN(c1053), MIN(c1055), MIN(c1057), MIN(c1059), MIN(c1061), MIN(c1063), MIN(c1065), MIN(c1066), MIN(c1068), MIN(c1070), MIN(c1072), MIN(c1074), MIN(c1076), MIN(c1078), MIN(c1080), MIN(c1082), MIN(c1084), MIN(c1086), MIN(c1088), MIN(c1090), MIN(c1092), MIN(c1093), MIN(c1095), MIN(c1097), MIN(c1099), MIN(c1101), MIN(c1103), MIN(c1105), MIN(c1107), MIN(c1109), MIN(c1111), MIN(c1113), MIN(c1115), MIN(c1117), MIN(c1119), MIN(c1120), MIN(c1122), MIN(c1124), MIN(c1126), MIN(c1128), MIN(c1130), MIN(c1132), MIN(c1134), MIN(c1136), MIN(c1138), MIN(c1140), MIN(c1142), MIN(c1144), MIN(c1146), MIN(c1147), MIN(c1149), MIN(c1151), MIN(c1153), MIN(c1155), MIN(c1157), MIN(c1159), MIN(c1161), MIN(c1163), MIN(c1165), MIN(c1167), MIN(c1169), MIN(c1171), MIN(c1173), MIN(c1174), MIN(c1176), MIN(c1178), MIN(c1180), MIN(c1182), MIN(c1184), MIN(c1186), MIN(c1188), MIN(c1190), MIN(c1192), MIN(c1194), MIN(c1196), MIN(c1198), MIN(c1200), MIN(c1201), MIN(c1203), MIN(c1205), MIN(c1207), MIN(c1209), MIN(c1211), MIN(c1213), MIN(c1215), MIN(c1217), MIN(c1219), MIN(c1221), MIN(c1223), MIN(c1225), MIN(c1227), MIN(c1228), MIN(c1230), MIN(c1232), MIN(c1234), MIN(c1236), MIN(c1238), MIN(c1240), MIN(c1242), MIN(c1244), MIN(c1246), MIN(c1248), MIN(c1250), MIN(c1252), MIN(c1254), MIN(c1255), MIN(c1257), MIN(c1259), MIN(c1261), MIN(c1263), MIN(c1265), MIN(c1267), MIN(c1269), MIN(c1271), MIN(c1273), MIN(c1275), MIN(c1277), MIN(c1279), MIN(c1281), MIN(c1282), MIN(c1284), MIN(c1286), MIN(c1288), MIN(c1290), MIN(c1292), MIN(c1294), MIN(c1296), MIN(c1298), MIN(c1300), MIN(c1302), MIN(c1304), MIN(c1306), MIN(c1308), MIN(c1309), MIN(c1311), MIN(c1313), MIN(c1315), MIN(c1317), MIN(c1319), MIN(c1321), MIN(c1323), MIN(c1325), MIN(c1327), MIN(c1329), MIN(c1331), MIN(c1333), MIN(c1335), MIN(c1336), MIN(c1338), MIN(c1340), MIN(c1342), MIN(c1344), MIN(c1346), MIN(c1348), MIN(c1350), MIN(c1352), MIN(c1354), MIN(c1356), MIN(c1358), MIN(c1360), MIN(c1362), MIN(c1363), MIN(c1365), MIN(c1367), MIN(c1369), MIN(c1371), MIN(c1373), MIN(c1375), MIN(c1377), MIN(c1379), MIN(c1381), MIN(c1383), MIN(c1385), MIN(c1387), MIN(c1389), MIN(c1390), MIN(c1392), MIN(c1394), MIN(c1396), MIN(c1398), MIN(c1400), MIN(c1402), MIN(c1404), MIN(c1406), MIN(c1408), MIN(c1410), MIN(c1412), MIN(c1414), MIN(c1416), MIN(c1417), MIN(c1419), MIN(c1421), MIN(c1423), MIN(c1425), MIN(c1427), MIN(c1429), MIN(c1431), MIN(c1433), MIN(c1435), MIN(c1437), MIN(c1439), MIN(c1441), MIN(c1443), MIN(c1444), MIN(c1446), MIN(c1448), MIN(c1450), MIN(c1452), MIN(c1454), MIN(c1456), MIN(c1458), MIN(c1460), MIN(c1462), MIN(c1464), MIN(c1466), MIN(c1468), MIN(c1470), MIN(c1471), MIN(c1473), MIN(c1475), MIN(c1477), MIN(c1479), MIN(c1481), MIN(c1483), MIN(c1485), MIN(c1487), MIN(c1489), MIN(c1491), MIN(c1493), MIN(c1495), MIN(c1497), MIN(c1498), MIN(c1500), MIN(c1502), MIN(c1504), MIN(c1506), MIN(c1508), MIN(c1510), MIN(c1512), MIN(c1514), MIN(c1516), MIN(c1518), MIN(c1520), MIN(c1522), MIN(c1524), MIN(c1525), MIN(c1527), MIN(c1529), MIN(c1531), MIN(c1533), MIN(c1535), MIN(c1537), MIN(c1539), MIN(c1541), MIN(c1543), MIN(c1545), MIN(c1547), MIN(c1549), MIN(c1551), MIN(c1552), MIN(c1554), MIN(c1556), MIN(c1558), MIN(c1560), MIN(c1562), MIN(c1564), MIN(c1566), MIN(c1568), MIN(c1570), MIN(c1572), MIN(c1574), MIN(c1576), MIN(c1578), MIN(c1579), MIN(c1581), MIN(c1583), MIN(c1585), MIN(c1587), MIN(c1589), MIN(c1591), MIN(c1593), MIN(c1595), MIN(c1597), MIN(c1599), MIN(c1601), MIN(c1603), MIN(c1605), MIN(c1606), MIN(c1608), MIN(c1610), MIN(c1612), MIN(c1614), MIN(c1616), MIN(c1618), MIN(c1620), MIN(c1622), MIN(c1624), MIN(c1626), MIN(c1628), MIN(c1630), MIN(c1632), MIN(c1633), MIN(c1635), MIN(c1637), MIN(c1639), MIN(c1641), MIN(c1643), MIN(c1645), MIN(c1647), MIN(c1649), MIN(c1651), MIN(c1653), MIN(c1655), MIN(c1657), MIN(c1659), MIN(c1660), MIN(c1662), MIN(c1664), MIN(c1666), MIN(c1668), MIN(c1670), MIN(c1672), MIN(c1674), MIN(c1676), MIN(c1678), MIN(c1680), MIN(c1682), MIN(c1684), MIN(c1686), MIN(c1687), MIN(c1689), MIN(c1691), MIN(c1693), MIN(c1695), MIN(c1697), MIN(c1699), MIN(c1701), MIN(c1703), MIN(c1705), MIN(c1707), MIN(c1709), MIN(c1711), MIN(c1713), MIN(c1714), MIN(c1716), MIN(c1718), MIN(c1720), MIN(c1722), MIN(c1724), MIN(c1726), MIN(c1728), MIN(c1730), MIN(c1732), MIN(c1734), MIN(c1736), MIN(c1738), MIN(c1740), MIN(c1741), MIN(c1743), MIN(c1745), MIN(c1747), MIN(c1749), MIN(c1751), MIN(c1753), MIN(c1755), MIN(c1757), MIN(c1759), MIN(c1761), MIN(c1763), MIN(c1765), MIN(c1767), MIN(c1768), MIN(c1770), MIN(c1772), MIN(c1774), MIN(c1776), MIN(c1778), MIN(c1780), MIN(c1782), MIN(c1784), MIN(c1786), MIN(c1788), MIN(c1790), MIN(c1792), MIN(c1794), MIN(c1795), MIN(c1797) FROM AMOSTRAS";
           con.query(sql,function(err, result){
            if(err) throw err;
            resolve(result);
          })
        })
    });
  },
  getAllDelta: () => {
    return new Promise((resolve,error) => {
        const con = Connection.getConnection();
        con.connect(function(err) {
          if (err) throw err;
          console.log('Connected!');
          var sql = "SELECT MAX(c525) - MIN(c525), MAX(c526) - MIN(c526), MAX(c528) - MIN(c528), MAX(c530) - MIN(c530), MAX(c532) - MIN(c532), MAX(c534) - MIN(c534), MAX(c536) - MIN(c536), MAX(c538) - MIN(c538), MAX(c540) - MIN(c540), MAX(c542) - MIN(c542), MAX(c544) - MIN(c544), MAX(c546) - MIN(c546), MAX(c548) - MIN(c548), MAX(c550) - MIN(c550), MAX(c552) - MIN(c552), MAX(c553) - MIN(c553), MAX(c555) - MIN(c555), MAX(c557) - MIN(c557), MAX(c559) - MIN(c559), MAX(c561) - MIN(c561), MAX(c563) - MIN(c563), MAX(c565) - MIN(c565), MAX(c567) - MIN(c567), MAX(c569) - MIN(c569), MAX(c571) - MIN(c571), MAX(c573) - MIN(c573), MAX(c575) - MIN(c575), MAX(c577) - MIN(c577), MAX(c579) - MIN(c579), MAX(c580) - MIN(c580), MAX(c582) - MIN(c582), MAX(c584) - MIN(c584), MAX(c586) - MIN(c586), MAX(c588) - MIN(c588), MAX(c590) - MIN(c590), MAX(c592) - MIN(c592), MAX(c594) - MIN(c594), MAX(c596) - MIN(c596), MAX(c598) - MIN(c598), MAX(c600) - MIN(c600), MAX(c602) - MIN(c602), MAX(c604) - MIN(c604), MAX(c606) - MIN(c606), MAX(c607) - MIN(c607), MAX(c609) - MIN(c609), MAX(c611) - MIN(c611), MAX(c613) - MIN(c613), MAX(c615) - MIN(c615), MAX(c617) - MIN(c617), MAX(c619) - MIN(c619), MAX(c621) - MIN(c621), MAX(c623) - MIN(c623), MAX(c625) - MIN(c625), MAX(c627) - MIN(c627), MAX(c629) - MIN(c629), MAX(c631) - MIN(c631), MAX(c633) - MIN(c633), MAX(c634) - MIN(c634), MAX(c636) - MIN(c636), MAX(c638) - MIN(c638), MAX(c640) - MIN(c640), MAX(c642) - MIN(c642), MAX(c644) - MIN(c644), MAX(c646) - MIN(c646), MAX(c648) - MIN(c648), MAX(c650) - MIN(c650), MAX(c652) - MIN(c652), MAX(c654) - MIN(c654), MAX(c656) - MIN(c656), MAX(c658) - MIN(c658), MAX(c660) - MIN(c660), MAX(c661) - MIN(c661), MAX(c663) - MIN(c663), MAX(c665) - MIN(c665), MAX(c667) - MIN(c667), MAX(c669) - MIN(c669), MAX(c671) - MIN(c671), MAX(c673) - MIN(c673), MAX(c675) - MIN(c675), MAX(c677) - MIN(c677), MAX(c679) - MIN(c679), MAX(c681) - MIN(c681), MAX(c683) - MIN(c683), MAX(c685) - MIN(c685), MAX(c687) - MIN(c687), MAX(c688) - MIN(c688), MAX(c690) - MIN(c690), MAX(c692) - MIN(c692), MAX(c694) - MIN(c694), MAX(c696) - MIN(c696), MAX(c698) - MIN(c698), MAX(c700) - MIN(c700), MAX(c702) - MIN(c702), MAX(c704) - MIN(c704), MAX(c706) - MIN(c706), MAX(c708) - MIN(c708), MAX(c710) - MIN(c710), MAX(c712) - MIN(c712), MAX(c714) - MIN(c714), MAX(c715) - MIN(c715), MAX(c717) - MIN(c717), MAX(c719) - MIN(c719), MAX(c721) - MIN(c721), MAX(c723) - MIN(c723), MAX(c725) - MIN(c725), MAX(c727) - MIN(c727), MAX(c729) - MIN(c729), MAX(c731) - MIN(c731), MAX(c733) - MIN(c733), MAX(c735) - MIN(c735), MAX(c737) - MIN(c737), MAX(c739) - MIN(c739), MAX(c741) - MIN(c741), MAX(c742) - MIN(c742), MAX(c744) - MIN(c744), MAX(c746) - MIN(c746), MAX(c748) - MIN(c748), MAX(c750) - MIN(c750), MAX(c752) - MIN(c752), MAX(c754) - MIN(c754), MAX(c756) - MIN(c756), MAX(c758) - MIN(c758), MAX(c760) - MIN(c760), MAX(c762) - MIN(c762), MAX(c764) - MIN(c764), MAX(c766) - MIN(c766), MAX(c768) - MIN(c768), MAX(c769) - MIN(c769), MAX(c771) - MIN(c771), MAX(c773) - MIN(c773), MAX(c775) - MIN(c775), MAX(c777) - MIN(c777), MAX(c779) - MIN(c779), MAX(c781) - MIN(c781), MAX(c783) - MIN(c783), MAX(c785) - MIN(c785), MAX(c787) - MIN(c787), MAX(c789) - MIN(c789), MAX(c791) - MIN(c791), MAX(c793) - MIN(c793), MAX(c795) - MIN(c795), MAX(c796) - MIN(c796), MAX(c798) - MIN(c798), MAX(c800) - MIN(c800), MAX(c802) - MIN(c802), MAX(c804) - MIN(c804), MAX(c806) - MIN(c806), MAX(c808) - MIN(c808), MAX(c810) - MIN(c810), MAX(c812) - MIN(c812), MAX(c814) - MIN(c814), MAX(c816) - MIN(c816), MAX(c818) - MIN(c818), MAX(c820) - MIN(c820), MAX(c822) - MIN(c822), MAX(c823) - MIN(c823), MAX(c825) - MIN(c825), MAX(c827) - MIN(c827), MAX(c829) - MIN(c829), MAX(c831) - MIN(c831), MAX(c833) - MIN(c833), MAX(c835) - MIN(c835), MAX(c837) - MIN(c837), MAX(c839) - MIN(c839), MAX(c841) - MIN(c841), MAX(c843) - MIN(c843), MAX(c845) - MIN(c845), MAX(c847) - MIN(c847), MAX(c849) - MIN(c849), MAX(c850) - MIN(c850), MAX(c852) - MIN(c852), MAX(c854) - MIN(c854), MAX(c856) - MIN(c856), MAX(c858) - MIN(c858), MAX(c860) - MIN(c860), MAX(c862) - MIN(c862), MAX(c864) - MIN(c864), MAX(c866) - MIN(c866), MAX(c868) - MIN(c868), MAX(c870) - MIN(c870), MAX(c872) - MIN(c872), MAX(c874) - MIN(c874), MAX(c876) - MIN(c876), MAX(c877) - MIN(c877), MAX(c879) - MIN(c879), MAX(c881) - MIN(c881), MAX(c883) - MIN(c883), MAX(c885) - MIN(c885), MAX(c887) - MIN(c887), MAX(c889) - MIN(c889), MAX(c891) - MIN(c891), MAX(c893) - MIN(c893), MAX(c895) - MIN(c895), MAX(c897) - MIN(c897), MAX(c899) - MIN(c899), MAX(c901) - MIN(c901), MAX(c903) - MIN(c903), MAX(c904) - MIN(c904), MAX(c906) - MIN(c906), MAX(c908) - MIN(c908), MAX(c910) - MIN(c910), MAX(c912) - MIN(c912), MAX(c914) - MIN(c914), MAX(c916) - MIN(c916), MAX(c918) - MIN(c918), MAX(c920) - MIN(c920), MAX(c922) - MIN(c922), MAX(c924) - MIN(c924), MAX(c926) - MIN(c926), MAX(c928) - MIN(c928), MAX(c930) - MIN(c930), MAX(c931) - MIN(c931), MAX(c933) - MIN(c933), MAX(c935) - MIN(c935), MAX(c937) - MIN(c937), MAX(c939) - MIN(c939), MAX(c941) - MIN(c941), MAX(c943) - MIN(c943), MAX(c945) - MIN(c945), MAX(c947) - MIN(c947), MAX(c949) - MIN(c949), MAX(c951) - MIN(c951), MAX(c953) - MIN(c953), MAX(c955) - MIN(c955), MAX(c957) - MIN(c957), MAX(c958) - MIN(c958), MAX(c960) - MIN(c960), MAX(c962) - MIN(c962), MAX(c964) - MIN(c964), MAX(c966) - MIN(c966), MAX(c968) - MIN(c968), MAX(c970) - MIN(c970), MAX(c972) - MIN(c972), MAX(c974) - MIN(c974), MAX(c976) - MIN(c976), MAX(c978) - MIN(c978), MAX(c980) - MIN(c980), MAX(c982) - MIN(c982), MAX(c984) - MIN(c984), MAX(c985) - MIN(c985), MAX(c987) - MIN(c987), MAX(c989) - MIN(c989), MAX(c991) - MIN(c991), MAX(c993) - MIN(c993), MAX(c995) - MIN(c995), MAX(c997) - MIN(c997), MAX(c999) - MIN(c999), MAX(c1001) - MIN(c1001), MAX(c1003) - MIN(c1003), MAX(c1005) - MIN(c1005), MAX(c1007) - MIN(c1007), MAX(c1009) - MIN(c1009), MAX(c1011) - MIN(c1011), MAX(c1012) - MIN(c1012), MAX(c1014) - MIN(c1014), MAX(c1016) - MIN(c1016), MAX(c1018) - MIN(c1018), MAX(c1020) - MIN(c1020), MAX(c1022) - MIN(c1022), MAX(c1024) - MIN(c1024), MAX(c1026) - MIN(c1026), MAX(c1028) - MIN(c1028), MAX(c1030) - MIN(c1030), MAX(c1032) - MIN(c1032), MAX(c1034) - MIN(c1034), MAX(c1036) - MIN(c1036), MAX(c1038) - MIN(c1038), MAX(c1039) - MIN(c1039), MAX(c1041) - MIN(c1041), MAX(c1043) - MIN(c1043), MAX(c1045) - MIN(c1045), MAX(c1047) - MIN(c1047), MAX(c1049) - MIN(c1049), MAX(c1051) - MIN(c1051), MAX(c1053) - MIN(c1053), MAX(c1055) - MIN(c1055), MAX(c1057) - MIN(c1057), MAX(c1059) - MIN(c1059), MAX(c1061) - MIN(c1061), MAX(c1063) - MIN(c1063), MAX(c1065) - MIN(c1065), MAX(c1066) - MIN(c1066), MAX(c1068) - MIN(c1068), MAX(c1070) - MIN(c1070), MAX(c1072) - MIN(c1072), MAX(c1074) - MIN(c1074), MAX(c1076) - MIN(c1076), MAX(c1078) - MIN(c1078), MAX(c1080) - MIN(c1080), MAX(c1082) - MIN(c1082), MAX(c1084) - MIN(c1084), MAX(c1086) - MIN(c1086), MAX(c1088) - MIN(c1088), MAX(c1090) - MIN(c1090), MAX(c1092) - MIN(c1092), MAX(c1093) - MIN(c1093), MAX(c1095) - MIN(c1095), MAX(c1097) - MIN(c1097), MAX(c1099) - MIN(c1099), MAX(c1101) - MIN(c1101), MAX(c1103) - MIN(c1103), MAX(c1105) - MIN(c1105), MAX(c1107) - MIN(c1107), MAX(c1109) - MIN(c1109), MAX(c1111) - MIN(c1111), MAX(c1113) - MIN(c1113), MAX(c1115) - MIN(c1115), MAX(c1117) - MIN(c1117), MAX(c1119) - MIN(c1119), MAX(c1120) - MIN(c1120), MAX(c1122) - MIN(c1122), MAX(c1124) - MIN(c1124), MAX(c1126) - MIN(c1126), MAX(c1128) - MIN(c1128), MAX(c1130) - MIN(c1130), MAX(c1132) - MIN(c1132), MAX(c1134) - MIN(c1134), MAX(c1136) - MIN(c1136), MAX(c1138) - MIN(c1138), MAX(c1140) - MIN(c1140), MAX(c1142) - MIN(c1142), MAX(c1144) - MIN(c1144), MAX(c1146) - MIN(c1146), MAX(c1147) - MIN(c1147), MAX(c1149) - MIN(c1149), MAX(c1151) - MIN(c1151), MAX(c1153) - MIN(c1153), MAX(c1155) - MIN(c1155), MAX(c1157) - MIN(c1157), MAX(c1159) - MIN(c1159), MAX(c1161) - MIN(c1161), MAX(c1163) - MIN(c1163), MAX(c1165) - MIN(c1165), MAX(c1167) - MIN(c1167), MAX(c1169) - MIN(c1169), MAX(c1171) - MIN(c1171), MAX(c1173) - MIN(c1173), MAX(c1174) - MIN(c1174), MAX(c1176) - MIN(c1176), MAX(c1178) - MIN(c1178), MAX(c1180) - MIN(c1180), MAX(c1182) - MIN(c1182), MAX(c1184) - MIN(c1184), MAX(c1186) - MIN(c1186), MAX(c1188) - MIN(c1188), MAX(c1190) - MIN(c1190), MAX(c1192) - MIN(c1192), MAX(c1194) - MIN(c1194), MAX(c1196) - MIN(c1196), MAX(c1198) - MIN(c1198), MAX(c1200) - MIN(c1200), MAX(c1201) - MIN(c1201), MAX(c1203) - MIN(c1203), MAX(c1205) - MIN(c1205), MAX(c1207) - MIN(c1207), MAX(c1209) - MIN(c1209), MAX(c1211) - MIN(c1211), MAX(c1213) - MIN(c1213), MAX(c1215) - MIN(c1215), MAX(c1217) - MIN(c1217), MAX(c1219) - MIN(c1219), MAX(c1221) - MIN(c1221), MAX(c1223) - MIN(c1223), MAX(c1225) - MIN(c1225), MAX(c1227) - MIN(c1227), MAX(c1228) - MIN(c1228), MAX(c1230) - MIN(c1230), MAX(c1232) - MIN(c1232), MAX(c1234) - MIN(c1234), MAX(c1236) - MIN(c1236), MAX(c1238) - MIN(c1238), MAX(c1240) - MIN(c1240), MAX(c1242) - MIN(c1242), MAX(c1244) - MIN(c1244), MAX(c1246) - MIN(c1246), MAX(c1248) - MIN(c1248), MAX(c1250) - MIN(c1250), MAX(c1252) - MIN(c1252), MAX(c1254) - MIN(c1254), MAX(c1255) - MIN(c1255), MAX(c1257) - MIN(c1257), MAX(c1259) - MIN(c1259), MAX(c1261) - MIN(c1261), MAX(c1263) - MIN(c1263), MAX(c1265) - MIN(c1265), MAX(c1267) - MIN(c1267), MAX(c1269) - MIN(c1269), MAX(c1271) - MIN(c1271), MAX(c1273) - MIN(c1273), MAX(c1275) - MIN(c1275), MAX(c1277) - MIN(c1277), MAX(c1279) - MIN(c1279), MAX(c1281) - MIN(c1281), MAX(c1282) - MIN(c1282), MAX(c1284) - MIN(c1284), MAX(c1286) - MIN(c1286), MAX(c1288) - MIN(c1288), MAX(c1290) - MIN(c1290), MAX(c1292) - MIN(c1292), MAX(c1294) - MIN(c1294), MAX(c1296) - MIN(c1296), MAX(c1298) - MIN(c1298), MAX(c1300) - MIN(c1300), MAX(c1302) - MIN(c1302), MAX(c1304) - MIN(c1304), MAX(c1306) - MIN(c1306), MAX(c1308) - MIN(c1308), MAX(c1309) - MIN(c1309), MAX(c1311) - MIN(c1311), MAX(c1313) - MIN(c1313), MAX(c1315) - MIN(c1315), MAX(c1317) - MIN(c1317), MAX(c1319) - MIN(c1319), MAX(c1321) - MIN(c1321), MAX(c1323) - MIN(c1323), MAX(c1325) - MIN(c1325), MAX(c1327) - MIN(c1327), MAX(c1329) - MIN(c1329), MAX(c1331) - MIN(c1331), MAX(c1333) - MIN(c1333), MAX(c1335) - MIN(c1335), MAX(c1336) - MIN(c1336), MAX(c1338) - MIN(c1338), MAX(c1340) - MIN(c1340), MAX(c1342) - MIN(c1342), MAX(c1344) - MIN(c1344), MAX(c1346) - MIN(c1346), MAX(c1348) - MIN(c1348), MAX(c1350) - MIN(c1350), MAX(c1352) - MIN(c1352), MAX(c1354) - MIN(c1354), MAX(c1356) - MIN(c1356), MAX(c1358) - MIN(c1358), MAX(c1360) - MIN(c1360), MAX(c1362) - MIN(c1362), MAX(c1363) - MIN(c1363), MAX(c1365) - MIN(c1365), MAX(c1367) - MIN(c1367), MAX(c1369) - MIN(c1369), MAX(c1371) - MIN(c1371), MAX(c1373) - MIN(c1373), MAX(c1375) - MIN(c1375), MAX(c1377) - MIN(c1377), MAX(c1379) - MIN(c1379), MAX(c1381) - MIN(c1381), MAX(c1383) - MIN(c1383), MAX(c1385) - MIN(c1385), MAX(c1387) - MIN(c1387), MAX(c1389) - MIN(c1389), MAX(c1390) - MIN(c1390), MAX(c1392) - MIN(c1392), MAX(c1394) - MIN(c1394), MAX(c1396) - MIN(c1396), MAX(c1398) - MIN(c1398), MAX(c1400) - MIN(c1400), MAX(c1402) - MIN(c1402), MAX(c1404) - MIN(c1404), MAX(c1406) - MIN(c1406), MAX(c1408) - MIN(c1408), MAX(c1410) - MIN(c1410), MAX(c1412) - MIN(c1412), MAX(c1414) - MIN(c1414), MAX(c1416) - MIN(c1416), MAX(c1417) - MIN(c1417), MAX(c1419) - MIN(c1419), MAX(c1421) - MIN(c1421), MAX(c1423) - MIN(c1423), MAX(c1425) - MIN(c1425), MAX(c1427) - MIN(c1427), MAX(c1429) - MIN(c1429), MAX(c1431) - MIN(c1431), MAX(c1433) - MIN(c1433), MAX(c1435) - MIN(c1435), MAX(c1437) - MIN(c1437), MAX(c1439) - MIN(c1439), MAX(c1441) - MIN(c1441), MAX(c1443) - MIN(c1443), MAX(c1444) - MIN(c1444), MAX(c1446) - MIN(c1446), MAX(c1448) - MIN(c1448), MAX(c1450) - MIN(c1450), MAX(c1452) - MIN(c1452), MAX(c1454) - MIN(c1454), MAX(c1456) - MIN(c1456), MAX(c1458) - MIN(c1458), MAX(c1460) - MIN(c1460), MAX(c1462) - MIN(c1462), MAX(c1464) - MIN(c1464), MAX(c1466) - MIN(c1466), MAX(c1468) - MIN(c1468), MAX(c1470) - MIN(c1470), MAX(c1471) - MIN(c1471), MAX(c1473) - MIN(c1473), MAX(c1475) - MIN(c1475), MAX(c1477) - MIN(c1477), MAX(c1479) - MIN(c1479), MAX(c1481) - MIN(c1481), MAX(c1483) - MIN(c1483), MAX(c1485) - MIN(c1485), MAX(c1487) - MIN(c1487), MAX(c1489) - MIN(c1489), MAX(c1491) - MIN(c1491), MAX(c1493) - MIN(c1493), MAX(c1495) - MIN(c1495), MAX(c1497) - MIN(c1497), MAX(c1498) - MIN(c1498), MAX(c1500) - MIN(c1500), MAX(c1502) - MIN(c1502), MAX(c1504) - MIN(c1504), MAX(c1506) - MIN(c1506), MAX(c1508) - MIN(c1508), MAX(c1510) - MIN(c1510), MAX(c1512) - MIN(c1512), MAX(c1514) - MIN(c1514), MAX(c1516) - MIN(c1516), MAX(c1518) - MIN(c1518), MAX(c1520) - MIN(c1520), MAX(c1522) - MIN(c1522), MAX(c1524) - MIN(c1524), MAX(c1525) - MIN(c1525), MAX(c1527) - MIN(c1527), MAX(c1529) - MIN(c1529), MAX(c1531) - MIN(c1531), MAX(c1533) - MIN(c1533), MAX(c1535) - MIN(c1535), MAX(c1537) - MIN(c1537), MAX(c1539) - MIN(c1539), MAX(c1541) - MIN(c1541), MAX(c1543) - MIN(c1543), MAX(c1545) - MIN(c1545), MAX(c1547) - MIN(c1547), MAX(c1549) - MIN(c1549), MAX(c1551) - MIN(c1551), MAX(c1552) - MIN(c1552), MAX(c1554) - MIN(c1554), MAX(c1556) - MIN(c1556), MAX(c1558) - MIN(c1558), MAX(c1560) - MIN(c1560), MAX(c1562) - MIN(c1562), MAX(c1564) - MIN(c1564), MAX(c1566) - MIN(c1566), MAX(c1568) - MIN(c1568), MAX(c1570) - MIN(c1570), MAX(c1572) - MIN(c1572), MAX(c1574) - MIN(c1574), MAX(c1576) - MIN(c1576), MAX(c1578) - MIN(c1578), MAX(c1579) - MIN(c1579), MAX(c1581) - MIN(c1581), MAX(c1583) - MIN(c1583), MAX(c1585) - MIN(c1585), MAX(c1587) - MIN(c1587), MAX(c1589) - MIN(c1589), MAX(c1591) - MIN(c1591), MAX(c1593) - MIN(c1593), MAX(c1595) - MIN(c1595), MAX(c1597) - MIN(c1597), MAX(c1599) - MIN(c1599), MAX(c1601) - MIN(c1601), MAX(c1603) - MIN(c1603), MAX(c1605) - MIN(c1605), MAX(c1606) - MIN(c1606), MAX(c1608) - MIN(c1608), MAX(c1610) - MIN(c1610), MAX(c1612) - MIN(c1612), MAX(c1614) - MIN(c1614), MAX(c1616) - MIN(c1616), MAX(c1618) - MIN(c1618), MAX(c1620) - MIN(c1620), MAX(c1622) - MIN(c1622), MAX(c1624) - MIN(c1624), MAX(c1626) - MIN(c1626), MAX(c1628) - MIN(c1628), MAX(c1630) - MIN(c1630), MAX(c1632) - MIN(c1632), MAX(c1633) - MIN(c1633), MAX(c1635) - MIN(c1635), MAX(c1637) - MIN(c1637), MAX(c1639) - MIN(c1639), MAX(c1641) - MIN(c1641), MAX(c1643) - MIN(c1643), MAX(c1645) - MIN(c1645), MAX(c1647) - MIN(c1647), MAX(c1649) - MIN(c1649), MAX(c1651) - MIN(c1651), MAX(c1653) - MIN(c1653), MAX(c1655) - MIN(c1655), MAX(c1657) - MIN(c1657), MAX(c1659) - MIN(c1659), MAX(c1660) - MIN(c1660), MAX(c1662) - MIN(c1662), MAX(c1664) - MIN(c1664), MAX(c1666) - MIN(c1666), MAX(c1668) - MIN(c1668), MAX(c1670) - MIN(c1670), MAX(c1672) - MIN(c1672), MAX(c1674) - MIN(c1674), MAX(c1676) - MIN(c1676), MAX(c1678) - MIN(c1678), MAX(c1680) - MIN(c1680), MAX(c1682) - MIN(c1682), MAX(c1684) - MIN(c1684), MAX(c1686) - MIN(c1686), MAX(c1687) - MIN(c1687), MAX(c1689) - MIN(c1689), MAX(c1691) - MIN(c1691), MAX(c1693) - MIN(c1693), MAX(c1695) - MIN(c1695), MAX(c1697) - MIN(c1697), MAX(c1699) - MIN(c1699), MAX(c1701) - MIN(c1701), MAX(c1703) - MIN(c1703), MAX(c1705) - MIN(c1705), MAX(c1707) - MIN(c1707), MAX(c1709) - MIN(c1709), MAX(c1711) - MIN(c1711), MAX(c1713) - MIN(c1713), MAX(c1714) - MIN(c1714), MAX(c1716) - MIN(c1716), MAX(c1718) - MIN(c1718), MAX(c1720) - MIN(c1720), MAX(c1722) - MIN(c1722), MAX(c1724) - MIN(c1724), MAX(c1726) - MIN(c1726), MAX(c1728) - MIN(c1728), MAX(c1730) - MIN(c1730), MAX(c1732) - MIN(c1732), MAX(c1734) - MIN(c1734), MAX(c1736) - MIN(c1736), MAX(c1738) - MIN(c1738), MAX(c1740) - MIN(c1740), MAX(c1741) - MIN(c1741), MAX(c1743) - MIN(c1743), MAX(c1745) - MIN(c1745), MAX(c1747) - MIN(c1747), MAX(c1749) - MIN(c1749), MAX(c1751) - MIN(c1751), MAX(c1753) - MIN(c1753), MAX(c1755) - MIN(c1755), MAX(c1757) - MIN(c1757), MAX(c1759) - MIN(c1759), MAX(c1761) - MIN(c1761), MAX(c1763) - MIN(c1763), MAX(c1765) - MIN(c1765), MAX(c1767) - MIN(c1767), MAX(c1768) - MIN(c1768), MAX(c1770) - MIN(c1770), MAX(c1772) - MIN(c1772), MAX(c1774) - MIN(c1774), MAX(c1776) - MIN(c1776), MAX(c1778) - MIN(c1778), MAX(c1780) - MIN(c1780), MAX(c1782) - MIN(c1782), MAX(c1784) - MIN(c1784), MAX(c1786) - MIN(c1786), MAX(c1788) - MIN(c1788), MAX(c1790) - MIN(c1790), MAX(c1792) - MIN(c1792), MAX(c1794) - MIN(c1794), MAX(c1795) - MIN(c1795), MAX(c1797) - MIN(c1797) FROM AMOSTRAS";
          con.query(sql,function(err, result){
            if(err) throw err;
            resolve(result);
          })
        })
    });
  }
};
export default AmostraDAO;